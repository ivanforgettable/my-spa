/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kNp8cf8jdBeeMKg1jDitVf
// Component: Pnq-doVdBm7e
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: kNp8cf8jdBeeMKg1jDitVf/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Pnq-doVdBm7e/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Get started with Plasmic visual CMS."}
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "Use Plasmic as a visual editor and headless CMS for your new or existing website!\n\nSupports frameworks like Next.js, Gatsby, Remix, Hydrogen, React, plain HTML, and many more.\n\nTo get started:\n\n"
                  }
                </React.Fragment>
                {
                  <ol
                    data-plasmic-name={"ol"}
                    data-plasmic-override={overrides.ol}
                    className={classNames(
                      projectcss.all,
                      projectcss.ol,
                      sty.ol
                    )}
                  >
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__ioOpH
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Integrate with your codebase by "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"clicking the Code button in the toolbar"}
                        </span>
                        <React.Fragment>{"."}</React.Fragment>
                      </React.Fragment>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__gLa3Z
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Follow the instructions to "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"register your own React components"}
                        </span>
                        <React.Fragment>
                          {
                            ", so that you can drag and drop them in Plasmic Studio."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__fbEpa
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Invite your colleagues as the "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"content creator role"}
                        </span>
                        <React.Fragment>
                          {
                            " to give them a simpler and safer editing experience using only your components, or as the "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"designer role"}
                        </span>
                        <React.Fragment>
                          {
                            " to give them full advanced layout/styling freedom\u2014no existing components required."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__v9U6E
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Now they can create pages or sections, and "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"hit Publish"}
                        </span>
                        <React.Fragment>
                          {
                            " to deploy to production or staging without bugging developers!"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </li>
                  </ol>
                }
                <React.Fragment>{"\n"}</React.Fragment>
                {
                  <PlasmicLink__
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link
                    )}
                    href={"https://docs.plasmic.app/learn/content-management/"}
                    platform={"react"}
                  >
                    {"Learn more in the docs"}
                  </PlasmicLink__>
                }
                <React.Fragment>{"!"}</React.Fragment>
              </React.Fragment>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "section", "h1", "text", "ol", "link"],
  section: ["section", "h1", "text", "ol", "link"],
  h1: ["h1"],
  text: ["text", "ol", "link"],
  ol: ["ol"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    ol: makeNodeComponent("ol"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
